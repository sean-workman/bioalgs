AA_MASS = {'G': 57, 'A': 71, 'S': 87, 'P': 97, 'V': 99,
           'T': 101, 'C': 103, 'I': 113, 'L': 113, 'N': 114,
           'D': 115, 'K': 128, 'Q': 128, 'E': 129, 'M': 131,
            'H': 137, 'F': 147, 'R': 156, 'Y': 163,'W': 186}

def linear_spectrum(peptide, mass_table):
    prefix_mass = [0]
    for ix,aa in enumerate(peptide, 1):
        for symbol in mass_table.keys():
            if symbol == aa:
                prefix_mass.append(prefix_mass[ix-1] + mass_table[symbol])
    spectrum = [0]
    for i,_ in enumerate(peptide):
        for j,_ in enumerate(peptide[i:], i+1):
            spectrum.append(prefix_mass[j] - prefix_mass[i])
    return sorted(spectrum)

def get_mass_frequency(spectrum):
    frequency = {}
    for mass in spectrum:
        if (mass in frequency):
            frequency[mass] += 1
        else:
            frequency[mass] = 1
    return frequency

def scoring(peptide, experimental_spectrum):
    theoretical_spectrum = linear_spectrum(peptide, AA_MASS)
    scoring_dict = {mass:0 for mass in experimental_spectrum}
    theoretical_dict = get_mass_frequency(theoretical_spectrum)
    for mass in experimental_spectrum:
        if mass in theoretical_dict:
            if scoring_dict[mass] < theoretical_dict[mass]:
                scoring_dict[mass] += 1
    score = sum(scoring_dict.values())
    return score

def trim(leaderboard, spectrum, n):
    leader_dict = {peptide:0 for peptide in leaderboard}
    new_leaders = []
    for peptide in leaderboard:
        leader_dict[peptide] = scoring(peptide, spectrum)
    scores = sorted(list(leader_dict.values()), reverse=True)
    scores = scores + [0]*(n-(len(leaderboard)))
    print(scores)
    for peptide,score in leader_dict.items():
        if score > scores[n]:
            new_leaders.append(peptide)
    return new_leaders

def main():
    leaderboard = ['YCYHERRQWGVLRFDHKAWGPHDGPSQGGIGQSYQWSCRFTSSSCQFNKF',
 'GYVQCTVDQLPMGCIAHCWSKRCKRWEKSPHYDQAYAFWHRLSEMVTFHI',
 'NPEFVNQLWFGVELRVNTHICVWNFAPWWVLVVWHVYIRVPELWYMSRVG',
 'AQKEPEQYKWHVDPRASPFCQNYYGIIHMCHKLGQCIHCCWKYADKERTM',
 'QLPLWVAGWHAQKPPEGRPLQSIAWFCFMRWSMIHPVCGGEQMSCFSSGA',
 'PEQINRNITVGPVSGASEPLVEYNYRLIRPPDADHELWSVVILMSEWDKV',
 'LPCLRRGTSWPIDGHCEQWAFYCQTCMVFHHVWARHSHTPNWNTEDHWVL',
 'QTGNRGLKRYTCHILTLIAIFVMHAHTRDMQARENHFQDEHMEWMVFWMH',
 'KLSVFKNCGRWLCFYVSGCCPAMCFFWMSGNVPYLMCMRQAHDQANVANW',
 'TERKVIMPMYATNEQQMRYNNWVTPMEYWKRDERWMLEFNLHKGCNYSMN',
 'PPPRGVMSCFYWICWYNPFDCKVGVLFYPMNCAPIHFDIEGMIKCLVDWF',
 'NWDYEPIDNFTYANLFTSCCQMDDFDWNLKVQRWSSCSVDDWWLGHGRQW',
 'DILPVPGMQHFGVNFARDQVQSACGKCIQKWFGEYCRASRCGHDSLWCDH',
 'MMMAHPFAQWDHEPPKSDMHTHIDGYMKPPINNPFHMNTVDLSLVEMPMP',
 'EVRFQLSRLSKTMCGSHEKGEICLRMYNIKPRRGQCPYDLISTRQVGNYT',
 'AKRFVAPDESKPHHMCTFAMCHTEEHNNYYQDMHHHVFLSGAFSRVNWYE',
 'RIHRMYITYFKHSYFAAQIRDCWCEYWHDDAPRTRQCFSYRIYQEHHDDT',
 'DRDKQIQYLTLWLVMWREISQTNRCSHRFVETVLGKYESQMTINHGPNIP',
 'LGQSRSVTPLNQEHVCLGYKYHSMKFWHPVFRLQTTDHANQSTLKDYQWI',
 'EYQIHTITRQRAYALWWQTYYWVHSSVKPTHGDARPLMTQYLYQEEWFKL']
    s = '0 57 71 71 97 97 99 99 99 101 101 103 103 103 103 103 113 113 113 113 113 113 113 113 113 114 114 114 115 128 128 128 128 128 129 129 129 131 137 137 147 147 156 163 163 163 163 174 184 186 186 186 186 186 194 198 200 202 210 210 216 216 226 227 227 228 231 232 232 234 236 241 241 241 242 242 242 243 243 245 246 246 250 259 261 264 265 265 276 276 276 277 285 287 291 299 299 299 301 305 307 314 323 323 326 330 330 333 338 341 344 345 345 346 346 348 349 355 355 356 361 364 364 370 372 372 375 378 378 379 379 384 387 389 389 392 400 404 404 408 419 421 422 427 433 436 439 440 446 446 447 447 448 451 451 452 458 458 459 461 462 471 473 474 474 475 485 487 488 491 492 492 493 500 501 502 502 505 507 507 511 517 518 545 547 550 550 550 553 555 556 560 561 564 564 564 565 570 571 572 573 575 575 577 582 586 587 587 588 588 596 602 603 605 608 609 610 613 613 614 620 620 621 625 631 635 637 646 653 665 668 669 673 674 674 674 676 677 678 684 684 684 688 688 690 692 693 701 701 709 715 717 723 724 725 727 733 734 734 736 736 736 738 738 739 741 745 748 750 750 766 772 772 772 775 777 778 782 787 787 791 796 797 798 801 806 806 807 814 821 828 830 832 837 837 837 838 841 845 849 851 851 851 853 856 858 863 870 871 878 878 881 886 886 888 894 895 901 908 909 911 911 919 920 920 921 922 922 925 934 940 943 948 951 957 958 959 961 964 964 964 965 966 966 969 973 977 977 991 1000 1004 1007 1008 1008 1014 1014 1015 1017 1018 1018 1022 1023 1023 1024 1035 1037 1039 1044 1048 1060 1061 1067 1068 1071 1071 1072 1074 1077 1078 1079 1079 1084 1088 1104 1105 1105 1106 1106 1108 1114 1117 1117 1120 1120 1127 1127 1128 1128 1131 1132 1136 1147 1152 1152 1155 1161 1163 1174 1175 1175 1176 1180 1181 1185 1185 1189 1191 1192 1199 1200 1200 1202 1209 1209 1217 1218 1221 1223 1227 1234 1234 1240 1241 1242 1245 1246 1247 1254 1259 1260 1265 1278 1283 1288 1289 1289 1289 1290 1292 1300 1303 1303 1303 1303 1304 1305 1306 1312 1313 1315 1322 1322 1330 1337 1338 1341 1343 1346 1347 1348 1348 1349 1359 1360 1362 1371 1372 1378 1382 1383 1391 1393 1401 1402 1403 1404 1406 1409 1409 1413 1416 1417 1418 1419 1426 1431 1432 1433 1450 1450 1451 1452 1459 1461 1461 1466 1469 1470 1474 1475 1475 1476 1486 1490 1496 1504 1506 1508 1509 1511 1511 1517 1522 1522 1523 1527 1530 1530 1531 1535 1535 1546 1546 1546 1547 1553 1562 1564 1564 1568 1573 1578 1579 1580 1587 1588 1589 1589 1593 1599 1603 1610 1620 1621 1624 1624 1633 1633 1635 1636 1638 1639 1647 1648 1649 1650 1655 1656 1659 1661 1668 1681 1684 1686 1691 1692 1692 1692 1692 1693 1693 1697 1700 1702 1702 1709 1713 1716 1716 1725 1736 1749 1749 1751 1751 1752 1752 1754 1759 1762 1762 1764 1768 1774 1787 1789 1794 1794 1796 1796 1797 1799 1805 1805 1807 1810 1810 1814 1815 1820 1822 1829 1839 1842 1849 1853 1854 1865 1865 1865 1867 1867 1876 1878 1879 1883 1886 1888 1896 1899 1900 1902 1902 1908 1909 1911 1912 1918 1924 1925 1926 1928 1933 1935 1938 1938 1943 1945 1956 1957 1962 1962 1968 1978 1979 1980 1981 1989 1995 1996 1996 1996 1999 2001 2014 2025 2027 2030 2033 2036 2037 2039 2040 2041 2046 2048 2051 2055 2065 2067 2071 2074 2075 2075 2081 2081 2085 2092 2095 2096 2109 2110 2110 2112 2113 2114 2124 2126 2132 2138 2140 2143 2143 2144 2146 2148 2149 2166 2167 2175 2180 2183 2183 2184 2187 2188 2193 2198 2199 2199 2204 2209 2211 2211 2223 2223 2224 2229 2237 2242 2245 2246 2254 2260 2261 2261 2266 2272 2273 2281 2286 2288 2294 2295 2296 2300 2307 2312 2312 2312 2312 2317 2324 2324 2326 2327 2330 2337 2345 2357 2359 2360 2367 2374 2374 2374 2375 2385 2387 2389 2397 2401 2408 2409 2409 2409 2417 2420 2425 2427 2429 2431 2436 2440 2440 2452 2470 2474 2474 2475 2482 2487 2488 2488 2488 2488 2492 2498 2498 2500 2503 2510 2512 2521 2522 2528 2530 2531 2537 2537 2546 2549 2550 2553 2553 2587 2588 2591 2595 2601 2601 2601 2602 2603 2606 2611 2615 2617 2621 2635 2637 2638 2640 2645 2650 2650 2650 2656 2663 2663 2668 2674 2691 2694 2698 2700 2708 2715 2716 2716 2716 2720 2720 2730 2734 2735 2739 2739 2753 2763 2763 2764 2765 2773 2776 2777 2787 2796 2797 2800 2801 2811 2813 2819 2829 2831 2833 2833 2836 2842 2847 2849 2849 2857 2867 2867 2876 2876 2878 2882 2892 2901 2902 2902 2910 2913 2926 2926 2928 2932 2933 2939 2944 2946 2959 2962 2962 2962 2970 2970 2973 2995 2996 2996 2999 3003 3004 3005 3017 3029 3032 3038 3039 3039 3041 3041 3043 3057 3062 3064 3075 3075 3087 3099 3100 3101 3102 3103 3107 3108 3109 3110 3118 3124 3142 3145 3152 3154 3156 3156 3168 3172 3185 3188 3201 3203 3206 3215 3215 3218 3223 3227 3227 3237 3238 3238 3246 3246 3248 3250 3255 3271 3281 3284 3285 3285 3289 3302 3303 3318 3337 3340 3340 3343 3348 3349 3351 3351 3352 3360 3374 3378 3384 3384 3392 3398 3400 3404 3413 3413 3417 3417 3446 3446 3447 3449 3451 3464 3475 3487 3487 3488 3488 3505 3513 3514 3515 3523 3526 3526 3526 3541 3545 3545 3548 3549 3564 3576 3576 3578 3601 3601 3602 3614 3616 3616 3627 3627 3637 3648 3654 3658 3663 3673 3673 3677 3678 3679 3689 3692 3705 3709 3712 3729 3729 3730 3740 3764 3776 3776 3777 3787 3790 3791 3791 3792 3795 3800 3804 3810 3821 3823 3840 3842 3843 3859 3875 3877 3879 3890 3892 3894 3905 3907 3915 3920 3924 3934 3951 3963 3973 3977 3978 3980 3986 3987 4005 4005 4010 4021 4022 4023 4028 4033 4037 4050 4076 4076 4087 4101 4101 4108 4109 4118 4121 4124 4124 4125 4136 4149 4179 4184 4191 4214 4221 4223 4223 4224 4229 4238 4250 4250 4256 4262 4262 4287 4292 4304 4337 4342 4347 4353 4355 4363 4363 4366 4370 4377 4386 4407 4409 4448 4450 4460 4465 4466 4469 4479 4484 4490 4505 4523 4533 4549 4549 4563 4578 4593 4595 4597 4598 4618 4632 4642 4646 4651 4662 4696 4696 4709 4711 4721 4741 4749 4755 4761 4764 4793 4795 4809 4810 4837 4848 4854 4858 4874 4896 4907 4908 4924 4927 4938 4950 4957 4995 4995 5010 5035 5037 5037 5040 5051 5094 5109 5113 5138 5142 5143 5148 5150 5214 5223 5226 5237 5241 5251 5256 5311 5327 5329 5336 5350 5355 5370 5384 5414 5424 5430 5483 5483 5484 5497 5513 5527 5527 5596 5597 5612 5626 5630 5660 5725 5725 5729 5759 5773 5838 5872 5876 5888 5975 6001 6001 6104 6114 6217'
    spectrum = [int(s) for s in s.split()]
    n = 6
    print(*trim(leaderboard, spectrum, n))

if __name__ == "__main__":
    main()